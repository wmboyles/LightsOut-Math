"""
This module contains methods for finding the kernel size (i.e. nullity) of an n x n Lights Out grid or torus.
"""

from functools import cache
from polynomials import GF2Polynomial


def find_bk(n: int) -> tuple[int, int]:
    """
    Calculates n = b*2^k - 1, where b and k are naturals and b is odd.

    Raises:
        ValueError: If n <= 0
    """

    if n <= 0:
        raise ValueError("n must be positive")

    binary_n = bin(n + 1)
    k = len(binary_n) - len(binary_n.rstrip("0"))
    b = (n + 1) >> k

    return b, k


@cache
def brute_f1(y: int) -> GF2Polynomial:
    """
    Calculate f(y), where y is even.
    Hunziker, Machivelo, and Park tell us that the results will be the square of a square-free polynomial.
    However, they don't give any neat identities here to reduce the problem instance size.

    So, we have to use the relationship between f and binomial coefficients.
    Sutner tells us that f_y(x) = sum_{i=0}^{y}{C(y+1+i, 2i+1) x^i mod 2}, where C(n,m) = n choose m.
    Thus, we need to find when C(y+1+i, 2i+1) is odd.
    Kummer's Theorem tells us that the largest q such that 2^q divides C(n,m) is the number of carries when adding (n-m) and m in base q.
    If the number of carries is 0 (i.e. (n-m) & m == 0), then C(n,m) is odd.
    So, C(n+1+i, 2i+1) is odd when (y-i) & (2i+1) == 0.
    """

    return GF2Polynomial({i for i in range(y + 1) if not ((y - i) & (2 * i + 1))})


@cache
def f_pair(n: int) -> tuple[GF2Polynomial, GF2Polynomial]:
    """
    Recursively define the following polynomials over Z_2[x]
    f(0,x) = 1, f(1,x) = x
    f(n+1,x) = x*f(n,x) + f(n-1,x)
    This method gives f(n,x) and f(n,x+1)

    It's known that deg gcd(f(n,x), f(n,x+1)) is the nullity of an n x n lights out grid.

    Raises:
        ValueError: if n < 0
    """

    if n < 0:
        raise ValueError("n must be positive")
    # f(0,x) = f(0,x+1) = 1
    elif n == 0:
        return GF2Polynomial({0}), GF2Polynomial({0})
    # f(1,x) = x, f(1,x+1) = x+1
    elif n == 1:
        return GF2Polynomial({1}), GF2Polynomial({0, 1})

    """
    From Hunziker, Machivelo, and Park
    "Chebyshev Polynomials Over Finite Fields and Reversibility of Sigma-automata on Square Grids"
    Lemma 2.6 (restated in our notation to avoid confusing offset)
    Let n = b*2^k - 1, where b is odd
    f(n, x)   = f(2^k - 1, x) * f(b-1, x) ** (2^k)
              = x^(2^k - 1)   * f(b-1, x) ** (2^k)
    """
    b, k = find_bk(n)

    polyb_f1 = brute_f1(b - 1)

    if k <= 1:
        f1 = polyb_f1
    else:
        exp = 2**k
        f1 = GF2Polynomial({exp - 1}) * (polyb_f1**exp)

    # Calculate f(n,x+1) by evaluating f(n,x) at x+1
    f2 = f1 @ GF2Polynomial({0, 1})

    return f1, f2


@cache
def g_pair(n: int) -> tuple[GF2Polynomial, GF2Polynomial]:
    """
    Recursively define the following polynomials over Z_2[x]
    g(0,x) = 0, g(1,x) = x
    g(n+1,x) = x*g(n,x) + g(n-1,x)
    This method gives g(n,x) and g(n,x+1)

    It's known that deg gcd(g(n,x), g(n,x+1)) is the nullity of an n x n Lights Out torus.

    Raises:
        ValueError: if n < 0
    """

    if n < 0:
        raise ValueError("n must be positive")
    # g(0,x) = g(0,x+1) = 0
    elif n == 0:
        return GF2Polynomial(), GF2Polynomial()

    # It's known that g(n,x) = x*f(n-1,x)
    f1, f2 = f_pair(n - 1)

    return f1 << 1, (f2 << 1) + f2


def primitive_root(p, root=2):
    """
    Checks whether root=2 is a primitive root modulo prime p.
    """

    return len({root**i % p for i in range(p - 1)}) == p - 1


@cache
def grid_nullity(n: int) -> int:
    """
    Returns the nullity of an n x n grid.
    """

    # n=0 and n=1 are nice base cases to just have
    if n == 0 or n == 1:
        return 0

    # Applying a result from Mazakazu Yamagishi's paper:
    # "Elliptic Curves Over Finite Fields and Reversibility of Additive Cellular Automata on Square Grids"
    # in the journal Finite Fields and Their Applications, we find that
    # d(2^k) = d(2^k - 2) when k is odd and d(2^k - 2) + 4 when k is even.)
    if n & (n - 1) == 0:
        # n = 2^k, n.bit_length() = k+1
        return grid_nullity(n - 2) + (4 if n.bit_length() & 1 else 0)

    # We proved:
    # 1. d(2n+1) = 2*d(n) + delta_n
    # 2. delta_{2n+1} = delta_n.
    # 3. delta_n = 2 * deg gcd(x, f_n(x+1) / g), where g = gcd(f_n(x), f_n(x+1)).
    # Thus, we'll take advantage of this to speed up our answer for n = b*2^k - 1 where k is large

    b, k = find_bk(n)

    # Hunziker, Machivelo, and Park and possibly also Sutner say  d(2^k - 1) = 0.
    if b == 1:
        return 0

    fp = f_pair(b - 1)
    g = GF2Polynomial.gcd(*fp)
    a = g.degree
    # k=1 means we had to brute force: calculating the gcd of f_n(x) and f_n(x+1)
    if k == 0:
        return a
    else:
        # Conjecture: delta = 2 if and only if n = 3*k + 2 for some k
        # delta = 2 if n % 3 == 2 else 0
        f2_div_g = fp[1] // g
        g2 = GF2Polynomial.gcd(GF2Polynomial({1}), f2_div_g)
        delta = 2 * g2.degree
        return (a + delta) * (2**k) - delta


@cache
def torus_nullity(n: int) -> int:
    """
    Returns the nullity of an n x n torus.
    """

    # We can calculate this one of two ways:
    # 1: calculate 2*deg gcd(g(n,x), g(n,x+1))
    # 2: Calculate 2*grid_nullity(n-1) + 4 if n is a multiple of 3, 2*grid_nullity(n-1) otherwise
    # We'll use the second one.

    # Both results come as from Yamagishi's paper "On the Dimension of the Space of Harmonic Functions on a Discrete Torus"
    # and are proven in his paper "Periodic Harmomic Functions on Lattices and Chebyshev Polynomials"

    return 2 * grid_nullity(n - 1) + (0 if n % 3 else 4)


# Let p_n be the polynomial in Z_2[x] whose coefficients correspond to the binary digits of n.
#   Example: p_13 = 1*x^3 + 1*x^2 + 0*x + 1 because 13 is 1101 in binary.
# Conjecture: Let f_m be the smallest Z_2[x] Chebyshev polynomial such than f_m is divisible by p_n.
#     Then for all natural numbers k, (p_n divides f_k) if and only if (m divides k).
def divisibility_period(n: int):
    pn = GF2Polynomial.from_number(n)

    i = 0
    while brute_f1(i) % pn != 0:
        i += 1

    return i + 1


"""
n   | period
----+-------
*1  | 1
*2  | 2
*3  | 3
*4  | 4
 5  | 3
*6  | 6
 7  | 5
 8  | 4
 9  | 15
10  | 6
11  | 9
*12 | 12
13  | 7
14  | 10
15  | 6
16  | 8
17  | 6
18  | 30
19  | 17
20  | 12
21  | 5
22  | 18
23  | 21
24  | 12

"""


l = [
    1,
    2,
    3,
    4,
    3,
    6,
    5,
    4,
    15,
    6,
    9,
    12,
    7,
    10,
    6,
    8,
    6,
    30,
    17,
    12,
    5,
    18,
    21,
    12,
    15,
    14,
    15,
    20,
    9,
    6,
    17,
    8,
    51,
    6,
    35,
    60,
    31,
    34,
    9,
    12,
    31,
    10,
    15,
    36,
    30,
    42,
    33,
    24,
    45,
    30,
    12,
    28,
    51,
    30,
    11,
    20,
    21,
    18,
    33,
    12,
    31,
    34,
    15,
    8,
    15,
    102,
    65,
    12,
    9,
    70,
    93,
    60,
    63,
    62,
    42,
    68,
    33,
    18,
    15,
    24,
    7,
    62,
    45,
    20,
    12,
    30,
    65,
    36,
    33,
    30,
    65,
    84,
    85,
    66,
    51,
    24,
    21,
    90,
    51,
    60,
    105,
    12,
    65,
    28,
    18,
    102,
    10,
    60,
    63,
    22,
    93,
    40,
    33,
    42,
    13,
    36,
    63,
    66,
    30,
    12,
    85,
    62,
    93,
    68,
    15,
    30,
    63,
    8,
    63,
    30,
    43,
    204,
    55,
    130,
    30,
    12,
    127,
    18,
    255,
    140,
    93,
    186,
    129,
    120,
    127,
    126,
    33,
    124,
    39,
    42,
    45,
    68,
    60,
    66,
    119,
    36,
    127,
    30,
    63,
    24,
    165,
    14,
    21,
    124,
    102,
    90,
    129,
    20,
    195,
    12,
    129,
    60,
    153,
    130,
    105,
    72,
    93,
    66,
    155,
    60,
    105,
    130,
    63,
    84,
    127,
    170,
    18,
    132,
    30,
    102,
    43,
    24,
    127,
    42,
    30,
    180,
    195,
    102,
    119,
    60,
    93,
    210,
    129,
    12,
    165,
    130,
    9,
    56,
    15,
    18,
    129,
    204,
    127,
    10,
    33,
    60,
    153,
    126,
    63,
    44,
    42,
    186,
    155,
    40,
    102,
    66,
    45,
    84,
    127,
    26,
    255,
    36,
    35,
    126,
    33,
    132,
    195,
    30,
    129,
    24,
    127,
    170,
    21,
    124,
    45,
    186,
    43,
    68,
    195,
    30,
    155,
    60,
    127,
    126,
    12,
    16,
    12,
    126,
    315,
    60,
    17,
    86,
    381,
    204,
    99,
    110,
    195,
    260,
    465,
    30,
    231,
    24,
    10,
    254,
    381,
    36,
    21,
    510,
    255,
    140,
    129,
    186,
    257,
    372,
    51,
    258,
    90,
    120,
    217,
    254,
    102,
    252,
    45,
    66,
    105,
    124,
    255,
    78,
    257,
    84,
    255,
    90,
    381,
    136,
    129,
    60,
    279,
    132,
    65,
    238,
    195,
    36,
    255,
    254,
    105,
    60,
    66,
    126,
    257,
    24,
    15,
    330,
    381,
    28,
    30,
    42,
    279,
    124,
    357,
    102,
    315,
    180,
    255,
    258,
    195,
    40,
    9,
    390,
    77,
    12,
    17,
    258,
    165,
    60,
    65,
    306,
    186,
    260,
    129,
    210,
    257,
    72,
    465,
    186,
    257,
    132,
    255,
    310,
    84,
    60,
    255,
    210,
    153,
    260,
    63,
    126,
    85,
    168,
    85,
    254,
    15,
    340,
    129,
    18,
    257,
    132,
    66,
    30,
    257,
    204,
    315,
    86,
    381,
    24,
    65,
    254,
    63,
    84,
    129,
    30,
    257,
    180,
    30,
    390,
    257,
    204,
    51,
    238,
    165,
    120,
    129,
    186,
    85,
    420,
    99,
    258,
    186,
    12,
    217,
    330,
    381,
    260,
    255,
    18,
    257,
    56,
    63,
    30,
    257,
    36,
    65,
    258,
    381,
    204,
    85,
    254,
    60,
    20,
    357,
    66,
    279,
    120,
    255,
    306,
    381,
    252,
    66,
    126,
    35,
    44,
    45,
    42,
    255,
    372,
    255,
    310,
    39,
    40,
    129,
    102,
    257,
    132,
    217,
    90,
    30,
    84,
    65,
    254,
    381,
    52,
    36,
    510,
    257,
    72,
    17,
    70,
    186,
    252,
    465,
    66,
    257,
    132,
    63,
    390,
    45,
    60,
    85,
    258,
    105,
    24,
    99,
    254,
    165,
    340,
    21,
    42,
    257,
    124,
    129,
    90,
    231,
    372,
    15,
    86,
    102,
    136,
    210,
    390,
    257,
    60,
    85,
    310,
    153,
    60,
    255,
    254,
    195,
    252,
    129,
    12,
    315,
    16,
    315,
    12,
    513,
    252,
    465,
    630,
    129,
    60,
    63,
    34,
    255,
    172,
    390,
    762,
    765,
    408,
    511,
    198,
    210,
    220,
    771,
    390,
    513,
    260,
    153,
    930,
    513,
    60,
    155,
    462,
    255,
    24,
    511,
    10,
    99,
    508,
    165,
    762,
    91,
    36,
    771,
    42,
    635,
    1020,
    511,
    510,
    42,
    280,
    204,
    258,
    513,
    372,
    585,
    514,
    15,
    372,
    645,
    102,
    129,
    516,
    231,
    90,
    527,
    120,
    585,
    434,
    129,
    508,
    771,
    102,
    635,
    252,
    30,
    90,
    171,
    132,
    187,
    210,
    651,
    248,
    771,
    510,
    165,
    156,
    595,
    514,
    36,
    84,
    511,
    510,
    195,
    180,
    381,
    762,
    171,
    136,
    105,
    258,
    165,
    60,
    511,
    558,
    255,
    132,
    73,
    130,
    126,
    476,
    45,
    390,
    57,
    72,
    645,
    510,
    51,
    508,
    186,
    210,
    513,
    60,
    771,
    66,
    63,
    252,
    511,
    514,
    465,
    24,
    561,
    30,
    195,
    660,
    126,
    762,
    171,
    28,
    771,
    30,
    527,
    84,
    645,
    558,
    129,
    248,
    165,
    714,
    63,
    204,
    511,
    630,
    51,
    180,
    511,
    510,
    60,
    516,
    771,
    390,
    70,
    40,
    771,
    18,
    27,
    780,
    511,
    154,
    510,
    12,
    45,
    34,
    651,
    516,
    381,
    330,
    513,
    120,
    63,
    130,
    129,
    612,
    255,
    186,
    513,
    260,
    186,
    258,
    635,
    420,
    511,
    514,
    99,
    72,
    78,
    930,
    455,
    372,
    215,
    514,
    255,
    132,
    561,
    510,
    45,
    620,
    255,
    84,
    513,
    120,
    511,
    510,
    255,
    420,
    381,
    306,
    635,
    260,
    105,
    126,
    171,
    252,
    585,
    170,
    66,
    168,
    155,
    170,
    126,
    508,
    771,
    30,
    18,
    340,
    381,
    258,
    527,
    36,
    21,
    514,
    195,
    264,
    279,
    66,
    635,
    60,
    511,
    514,
    357,
    204,
    511,
    630,
    255,
    172,
    60,
    762,
    165,
    48,
    511,
    130,
    24,
    508,
    315,
    126,
    527,
    84,
    381,
    258,
    105,
    60,
    117,
    514,
    51,
    360,
    231,
    30,
    513,
    780,
    511,
    514,
    465,
    204,
    155,
    102,
    99,
    476,
    390,
    330,
    171,
    120,
    90,
    258,
    513,
    372,
    63,
    170,
    51,
    420,
    187,
    198,
    129,
    516,
    771,
    186,
    635,
    24,
    73,
    434,
    30,
    660,
    381,
    762,
    63,
    260,
    255,
    510,
    513,
    36,
    215,
    514,
    42,
    56,
    771,
    126,
    765,
    60,
    561,
    514,
    66,
    36,
    511,
    130,
    255,
    516,
    105,
    762,
    513,
    408,
    645,
    170,
    129,
    508,
    279,
    60,
    455,
    20,
    390,
    714,
    57,
    132,
    465,
    558,
    195,
    120,
    511,
    510,
    651,
    612,
    204,
    762,
    165,
    252,
    105,
    66,
    513,
    252,
    511,
    70,
    45,
    88,
    381,
    90,
    19,
    84,
    645,
    510,
    255,
    372,
    63,
    510,
    510,
    620,
    771,
    78,
    513,
    40,
    381,
    258,
    527,
    204,
    73,
    514,
    315,
    132,
    215,
    434,
    66,
    180,
    771,
    30,
    513,
    168,
    585,
    130,
    255,
    508,
    30,
    762,
    527,
    52,
    771,
    36,
    55,
    1020,
    14,
    514,
    129,
    72,
    73,
    34,
    465,
    140,
    771,
    186,
    165,
    252,
    84,
    930,
    63,
    132,
    645,
    514,
    255,
    264,
    255,
    126,
    455,
    780,
    511,
    90,
    126,
    60,
    511,
    170,
    255,
    516,
    153,
    210,
    635,
    24,
    595,
    198,
    15,
    508,
    381,
    330,
    513,
    340,
    279,
    42,
    513,
    84,
    511,
    514,
    60,
    248,
    390,
    258,
    635,
    180,
    511,
    462,
    255,
    372,
    511,
    30,
    357,
    172,
    315,
    102,
    63,
    136,
    771,
    210,
    171,
    780,
    90,
    514,
    129,
    60,
]
